generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  classifyApiKey     String?
  lunchMoneyApiKey   String?
  accounts           Account[]
  bankAccounts       BankAccount[]
  categories         Category[]
  classificationJobs ClassificationJob[]
  monthlyAggregates  MonthlyAggregate[]
  sessions           Session[]
  trainingJobs       TrainingJob[]
  transactions       Transaction[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccount {
  id               String        @id @default(cuid())
  name             String
  type             String
  balance          Float         @default(0)
  userId           String
  plaidItemId      String?
  plaidAccessToken String?
  lastSync         DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     Transaction[]
}

model Category {
  id               String            @id @default(cuid())
  name             String
  icon             String?
  userId           String
  isDefault        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryExpenses CategoryExpense[]
  transactions     Transaction[]

  @@unique([name, userId])
}

model Transaction {
  id                  String             @id @default(cuid())
  date                DateTime
  description         String
  amount              Float
  type                String
  bankAccountId       String
  categoryId          String?
  userId              String
  isReconciled        Boolean            @default(false)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  classificationJobId String?
  isTrainingData      Boolean            @default(false)
  lunchMoneyCategory  String?
  lunchMoneyId        String?
  predictedCategory   String?
  similarityScore     Float?
  trainingJobId       String?
  bankAccount         BankAccount        @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category            Category?          @relation(fields: [categoryId], references: [id])
  classificationJob   ClassificationJob? @relation(fields: [classificationJobId], references: [id])
  trainingJob         TrainingJob?       @relation(fields: [trainingJobId], references: [id])
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lunchMoneyId])
}

model TrainingJob {
  id           String        @id @default(cuid())
  userId       String
  status       String
  predictionId String?
  createdAt    DateTime      @default(now())
  completedAt  DateTime?
  error        String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model ClassificationJob {
  id           String        @id @default(cuid())
  userId       String
  status       String
  predictionId String?
  createdAt    DateTime      @default(now())
  completedAt  DateTime?
  error        String?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model MonthlyAggregate {
  id               String            @id @default(cuid())
  month            DateTime
  userId           String
  income           Float             @default(0)
  tax              Float             @default(0)
  credit           Float             @default(0)
  netIncome        Float             @default(0)
  expenses         Float             @default(0)
  netSavings       Float             @default(0)
  netBurn          Float             @default(0)
  savingsRate      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  categoryExpenses CategoryExpense[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month])
}

model CategoryExpense {
  id                 String           @id @default(cuid())
  monthlyAggregateId String
  categoryId         String
  amount             Float            @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  category           Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  monthlyAggregate   MonthlyAggregate @relation(fields: [monthlyAggregateId], references: [id], onDelete: Cascade)

  @@unique([monthlyAggregateId, categoryId])
}
