// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password
  accounts      Account[]
  sessions      Session[]
  // App specific relations
  bankAccounts  BankAccount[]
  transactions  Transaction[]
  categories    Category[]
  // Lunch Money integration
  lunchMoneyApiKey String?    // Lunch Money API key
  classifyApiKey   String?    // API key for the transaction classification service
  trainingJobs     TrainingJob[]
  classificationJobs ClassificationJob[]
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App specific models
model BankAccount {
  id            String        @id @default(cuid())
  name          String
  type          String        // e.g., Checking, Savings, Credit Card
  balance       Float         @default(0)
  userId        String
  plaidItemId   String?       // For Plaid integration (future)
  plaidAccessToken String?    @db.Text // For Plaid integration (future)
  lastSync      DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            String        @id @default(cuid())
  name          String
  icon          String?       // For UI display
  userId        String        // User-defined categories
  isDefault     Boolean       @default(false) // System default categories
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // Prevent duplicate category names per user
}

model Transaction {
  id            String      @id @default(cuid())
  date          DateTime
  description   String
  amount        Float       // Always positive value
  type          String      // 'income' or 'expense'
  bankAccountId String
  categoryId    String?
  userId        String
  isReconciled  Boolean     @default(false)
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category      Category?   @relation(fields: [categoryId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Lunch Money specific fields
  lunchMoneyId  String?     // ID in Lunch Money system
  lunchMoneyCategory String? // Original category from Lunch Money
  // Classification related fields
  trainingJob   TrainingJob?    @relation(fields: [trainingJobId], references: [id])
  trainingJobId String?
  classificationJob ClassificationJob? @relation(fields: [classificationJobId], references: [id])
  classificationJobId String?
  isTrainingData Boolean @default(false) // Used for training data
  predictedCategory String? // Category predicted by the model
  similarityScore Float?   // Confidence score of prediction
}

// Models for transaction classification
model TrainingJob {
  id              String        @id @default(cuid())
  userId          String
  status          String        // "pending", "processing", "completed", "failed"
  predictionId    String?       // ID from the classification service
  createdAt       DateTime      @default(now())
  completedAt     DateTime?
  error           String?
  transactions    Transaction[] // Transactions used for training
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClassificationJob {
  id              String        @id @default(cuid())
  userId          String
  status          String        // "pending", "processing", "completed", "failed"
  predictionId    String?       // ID from the classification service
  createdAt       DateTime      @default(now())
  completedAt     DateTime?     
  error           String?
  transactions    Transaction[] // Transactions that were classified
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}
