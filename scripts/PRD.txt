<context>
# Overview  
A personal finance analytics dashboard that connects with Lunch Money API to provide detailed monthly financial metrics including income, expenses, savings rate, and category-specific expenditures. This tool helps users track their financial health over time without manual data entry, while enabling supplementary income data that may not be available in Lunch Money.

# Core Features  
1. **Monthly Financial Aggregates**
   - Income tracking (possibly manual entry)
   - Tax calculation and credit tracking
   - Net income, expenses, and net savings calculations
   - Savings rate metrics and trends over time
   - Category-specific expense tracking (Groceries, Shopping, etc.)

2. **Financial Dashboard**
   - Monthly aggregate table display
   - Savings rate visualization and trends
   - Category breakdown of expenses
   - Net burn/savings tracking

3. **Data Synchronization**
   - Lunch Money API integration
   - Monthly data aggregation
   - Storage of historical monthly summaries
   - Support for manual data entry where needed

# User Experience  
1. **User Personas**
   - Financial Tracker: User who wants detailed insights into their spending and saving habits
   - Retirement Planner: User focused on long-term financial planning and saving goals
   - Budget Manager: User who needs detailed category-level expense tracking

2. **Key User Flows**
   - Initial Setup: Connect Lunch Money API, configure income sources
   - Monthly Review: Check latest financial metrics and trends
   - Data Maintenance: Add missing income information, review categorizations
   - Financial Planning: Analyze savings rate, adjust spending in specific categories

3. **UI/UX Considerations**
   - Clean, tabular layout similar to spreadsheet for familiar experience
   - Visual charts for trend analysis
   - Responsive design for desktop and mobile
   - Simple data entry forms for manual income tracking

# Technical Architecture  
1. **System Components**
   - Frontend: Next.js application with Tailwind CSS
   - Backend: Node.js API for data processing
   - Database: PostgreSQL with tables for monthly aggregates
   - Sync Service: Scheduled jobs for Lunch Money data refresh

2. **Data Models**
   - MonthlyAggregate: Stores monthly financial summary (income, expenses, savings)
   - CategoryExpenses: Stores expense breakdown by category
   - IncomeSource: Tracks different income sources (manual entry)
   - SyncStatus: Tracks last successful sync operation

3. **APIs and Integrations**
   - Lunch Money API for transaction data
   - Custom API endpoints for manual data entry
   - Data transformation layer for metric calculations

4. **Infrastructure Requirements**
   - Secure API token storage
   - Scheduled jobs for monthly aggregation
   - Database for historical data storage

# Development Roadmap  
1. **Phase 1: Core Data Foundation**
   - Set up project structure and database schema
   - Implement Lunch Money API client
   - Build transaction fetching and storage mechanism
   - Create monthly aggregation logic
   - Develop manual income entry interface
   - Implement basic month-by-month metrics calculation

2. **Phase 2: Financial Dashboard**
   - Build monthly aggregate table view
   - Implement category expense breakdown
   - Add savings rate calculation
   - Create basic visualization components
   - Develop data refresh functionality
   - Add basic filtering capabilities

3. **Phase 3: Extended Analytics**
   - Implement trend analysis for savings rate
   - Add historical comparison features
   - Create savings rate projections
   - Build category spending analysis
   - Develop custom date range selection
   - Implement data export functionality

4. **Phase 4: Advanced Features**
   - Add budget comparison
   - Implement goal tracking
   - Create scenario modeling
   - Add custom category grouping
   - Develop advanced visualization options
   - Implement user preferences and settings

# Logical Dependency Chain
1. **Foundation Layer**
   - Database schema setup
   - Lunch Money API integration
   - Basic data sync process
   - Income data entry forms

2. **Core Processing Layer**
   - Monthly aggregation logic
   - Expense categorization
   - Savings rate calculation
   - Basic metrics computation

3. **Visualization Layer**
   - Monthly aggregate table
   - Basic charts and metrics
   - Category breakdown display
   - Data refresh and filtering

4. **Advanced Features**
   - Trend analysis and projections
   - Historical comparisons
   - Custom reporting options
   - Data export functionality

# Risks and Mitigations  
1. **Missing Income Data**
   - Risk: Lunch Money may not have complete income information
   - Mitigation: Build robust manual entry forms for income data with validation

2. **Category Mapping**
   - Risk: Categories in Lunch Money may not match desired reporting categories
   - Mitigation: Create a flexible category mapping system

3. **Data Synchronization Challenges**
   - Risk: Complex sync process may lead to errors or inconsistencies
   - Mitigation: Focus on monthly aggregates rather than transaction-level sync

4. **Calculation Accuracy**
   - Risk: Complex financial metrics may have calculation errors
   - Mitigation: Implement unit tests for all financial calculations, provide transparent calculation methods

# Appendix  
1. **Monthly Aggregate Data Structure**
```
MonthlyAggregate {
  month: Date (YYYY-MM-01),
  income: Decimal,
  tax: Decimal,
  credit: Decimal,
  netIncome: Decimal,
  expenses: Decimal,
  netSavings: Decimal,
  netBurn: Decimal,
  savingsRate: Decimal,
  growingSavingsRateOverTime: Decimal,
  savingsRateOfTotal: Decimal,
  savingsOfTotalOverTime: Decimal,
  
  // Category expenses
  groceries: Decimal,
  shopping: Decimal,
  dinnerBars: Decimal,
  medical: Decimal,
  transport: Decimal,
  utility: Decimal,
  travel: Decimal,
  kids: Decimal,
  business: Decimal,
  living: Decimal
}
```

2. **Category Mapping**
```
CategoryMapping {
  lunchMoneyCategory: String,
  reportingCategory: String (enum of available categories),
  isActive: Boolean
}
```

3. **Data Sync Process**
The monthly sync process will:
1. Fetch all transactions for the target month from Lunch Money
2. Categorize transactions based on the category mapping
3. Sum up expenses by category
4. Combine with manually entered income data
5. Calculate derivative metrics (savings rate, etc.)
6. Store the monthly aggregate in the database

This approach focuses on monthly aggregates rather than transaction-level synchronization, simplifying the process while still providing the desired analytics.
</context>
